import std::io; // Import

enum TestEnum1 { // Enum definition
  TEST_ENUM1_ELEM_1 = !1,
  TEST_ENUM1_ELEM_2,
  TEST_ENUM1_ELEM_3,
  TEST_ENUM1_ELEM_4,
}

export enum TestEnum2 { // Exported enum definition
  TEST_ENUM2_ELEM_1,
  TEST_ENUM2_ELEM_2,
  TEST_ENUM2_ELEM_3,
  TEST_ENUM2_ELEM_4
}

typedef *sometype[][][] newtype; // Type definition

id1: int;                // Variable declaration
id2: int = 4;            // Variable definition
const id_const: int = 5; // Constant variable definition

struct MyStruct {
  a: int;
}

template <T>
struct GenericStruct {
  data: *T;
}

template <T>
generic_test :: () -> T {
  return 0;
}

// Function definition
main :: (argc: int = 4*5, argv: char[][]) -> int {
  return 69; // Return statement

  goto @label; // Goto statement

  @label: // Label statement

  break;    // Break statement
  continue; // Continue statement

  { // Statement list
    return 99;
  }

  while (false) continue;
  while (5 == 4 + 1 * 4 << 1) {
    break;
  }

  for (; 1 < 2; id = 4) break;

  do { } while (0);

  variable: float = 0.53f;

  nestedfunc :: (argument: int) -> int {
    return argument * 2;
  }

  for (i: size_t = 0; i < argc; i += 1) {
    variable: int = nestedfunc(argc + i);
  }

  call_to_func(123 + 4, id / 2.25f);

  switch (id + 5) {
    case 1 + 2: return 0;

    default: {
      id += 14;
      break;
    }
  }

  defer { println("TESTLINE", 123llu, 4.0f); }

  someStruct: SomeStruct;
  someStruct.int_field = 5;
  someStruct.struct_field.float_field = 5.0f;

  someValue = someModule::someSymbol;
  someModule1::someModule2::someSymbol = 5;

  variable: someModule::typeFromModule = 0;

  initTest: someStruct = { .field = 5, 45.0f };
}

testfunc :: () -> void {
  struct StructInFunc {
    val: int;

    setValue :: (value: int) -> void {
      val = value;
    }
  }

  template <T>
  struct GenericStructInFunc {
    data: *T;

    createData :: (value: T) -> void {
      data = alloc(sizeof(T));
      *data = value;
    }
  }
}

struct StructWithMarkers {
public:
  public_field: int = 5;

private:
  private_field: int = 4;
}

testFunc :: () -> void {
  if (array == nullptr) return 0;

  if (array != nullptr) {
    std::io::println("Hello");
  } else return 10;
}

const funcPtrArray: (arg: int)[];

testFunc :: () {
  module1::module2::symbol;
  module1::struct1.field;

  return;
}
