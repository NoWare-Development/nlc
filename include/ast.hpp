#pragma once

#include <string>
#include <vector>

namespace nlc
{

enum ASTGroup
{
  AST_GROUP_NULL = 0,
  AST_GROUP_STMT,
  AST_GROUP_ENUM,
  AST_GROUP_TYPE,
  AST_GROUP_VAR,
  AST_GROUP_FUNC,
  AST_GROUP_EXPR_BINARY_OPERATOR,
  AST_GROUP_EXPR_COMPARE_OPERATOR,
  AST_GROUP_EXPR_ASSIGN_OPERATOR,
  AST_GROUP_EXPR_PREFIX_OPERATOR,
  AST_GROUP_EXPR_OPERAND,
  AST_GROUP_TEMPLATE,
};

#define __AST_DEF(group, id) (((group) & 0xFF) << 8) | ((id) & 0xFF)
enum ASTType
{
  AST_ERR = __AST_DEF (AST_GROUP_NULL, 0),

  AST_PROG = __AST_DEF (AST_GROUP_NULL, 1),
  AST_EXPR = __AST_DEF (AST_GROUP_NULL, 2),
  AST_MODULE = __AST_DEF (AST_GROUP_NULL, 3),
  AST_IMPORT = __AST_DEF (AST_GROUP_NULL, 4),
  AST_TYPEDEF = __AST_DEF (AST_GROUP_NULL, 5),
  AST_EXPORT = __AST_DEF (AST_GROUP_NULL, 6),
  AST_MODIFIER = __AST_DEF (AST_GROUP_NULL, 7),
  AST_NONE = __AST_DEF (AST_GROUP_NULL, 8),
  AST_LABEL = __AST_DEF (AST_GROUP_NULL, 9),
  AST_VARIADIC = __AST_DEF (AST_GROUP_NULL, 10),
  AST_TEMPLATE = __AST_DEF (AST_GROUP_NULL, 11),
  AST_STRUCT = __AST_DEF (AST_GROUP_NULL, 12),

  AST_STMT_LIST = __AST_DEF (AST_GROUP_STMT, 0),
  AST_STMT_RETURN = __AST_DEF (AST_GROUP_STMT, 1),
  AST_STMT_GOTO = __AST_DEF (AST_GROUP_STMT, 2),
  AST_STMT_LABEL = __AST_DEF (AST_GROUP_STMT, 3),
  AST_STMT_BREAK = __AST_DEF (AST_GROUP_STMT, 4),
  AST_STMT_CONTINUE = __AST_DEF (AST_GROUP_STMT, 5),
  AST_STMT_WHILE = __AST_DEF (AST_GROUP_STMT, 6),
  AST_STMT_FOR = __AST_DEF (AST_GROUP_STMT, 7),
  AST_STMT_DOWHILE = __AST_DEF (AST_GROUP_STMT, 8),
  AST_STMT_EXPR = __AST_DEF (AST_GROUP_STMT, 9),
  AST_STMT_SWITCH = __AST_DEF (AST_GROUP_STMT, 10),
  AST_STMT_CASE = __AST_DEF (AST_GROUP_STMT, 11),
  AST_STMT_DEFAULT = __AST_DEF (AST_GROUP_STMT, 12),
  AST_STMT_DEFER = __AST_DEF (AST_GROUP_STMT, 13),

  AST_ENUM_DEF = __AST_DEF (AST_GROUP_ENUM, 0),
  AST_ENUM_ELEMENT = __AST_DEF (AST_GROUP_ENUM, 1),

  AST_TYPE_PLAIN = __AST_DEF (AST_GROUP_TYPE, 0),
  AST_TYPE_ARRAY = __AST_DEF (AST_GROUP_TYPE, 1),
  AST_TYPE_POINTER = __AST_DEF (AST_GROUP_TYPE, 2),

  AST_VAR_DECL = __AST_DEF (AST_GROUP_VAR, 0),
  AST_VAR_DEF = __AST_DEF (AST_GROUP_VAR, 1),

  AST_FUNC_PROTO = __AST_DEF (AST_GROUP_FUNC, 0),
  AST_FUNC_DECL = __AST_DEF (AST_GROUP_FUNC, 1),
  AST_FUNC_DEF = __AST_DEF (AST_GROUP_FUNC, 2),
  AST_FUNC_ARGLIST = __AST_DEF (AST_GROUP_FUNC, 3),

  AST_EXPR_BINARY_OPERATOR_ADD = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 0),
  AST_EXPR_BINARY_OPERATOR_SUB = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 1),
  AST_EXPR_BINARY_OPERATOR_MUL = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 2),
  AST_EXPR_BINARY_OPERATOR_DIV = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 3),
  AST_EXPR_BINARY_OPERATOR_MOD = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 4),
  AST_EXPR_BINARY_OPERATOR_SHL = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 5),
  AST_EXPR_BINARY_OPERATOR_SHR = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 6),
  AST_EXPR_BINARY_OPERATOR_AND = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 7),
  AST_EXPR_BINARY_OPERATOR_OR = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 8),
  AST_EXPR_BINARY_OPERATOR_XOR = __AST_DEF (AST_GROUP_EXPR_BINARY_OPERATOR, 9),

  AST_EXPR_COMPARE_OPERATOR_EQ
  = __AST_DEF (AST_GROUP_EXPR_COMPARE_OPERATOR, 0),
  AST_EXPR_COMPARE_OPERATOR_NOTEQ
  = __AST_DEF (AST_GROUP_EXPR_COMPARE_OPERATOR, 1),
  AST_EXPR_COMPARE_OPERATOR_LTHAN
  = __AST_DEF (AST_GROUP_EXPR_COMPARE_OPERATOR, 2),
  AST_EXPR_COMPARE_OPERATOR_GTHAN
  = __AST_DEF (AST_GROUP_EXPR_COMPARE_OPERATOR, 3),
  AST_EXPR_COMPARE_OPERATOR_LTHANEQ
  = __AST_DEF (AST_GROUP_EXPR_COMPARE_OPERATOR, 4),
  AST_EXPR_COMPARE_OPERATOR_GTHANEQ
  = __AST_DEF (AST_GROUP_EXPR_COMPARE_OPERATOR, 5),

  AST_EXPR_ASSIGN_OPERATOR_EQ = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 0),
  AST_EXPR_ASSIGN_OPERATOR_ADDEQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 1),
  AST_EXPR_ASSIGN_OPERATOR_SUBEQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 2),
  AST_EXPR_ASSIGN_OPERATOR_MULEQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 3),
  AST_EXPR_ASSIGN_OPERATOR_DIVEQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 4),
  AST_EXPR_ASSIGN_OPERATOR_MODEQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 5),
  AST_EXPR_ASSIGN_OPERATOR_SHLEQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 6),
  AST_EXPR_ASSIGN_OPERATOR_SHREQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 7),
  AST_EXPR_ASSIGN_OPERATOR_ANDEQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 8),
  AST_EXPR_ASSIGN_OPERATOR_OREQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 9),
  AST_EXPR_ASSIGN_OPERATOR_XOREQ
  = __AST_DEF (AST_GROUP_EXPR_ASSIGN_OPERATOR, 10),

  AST_EXPR_PREFIX_OPERATOR_NOT = __AST_DEF (AST_GROUP_EXPR_PREFIX_OPERATOR, 0),
  AST_EXPR_PREFIX_OPERATOR_BNOT
  = __AST_DEF (AST_GROUP_EXPR_PREFIX_OPERATOR, 1),
  AST_EXPR_PREFIX_OPERATOR_NEG = __AST_DEF (AST_GROUP_EXPR_PREFIX_OPERATOR, 2),
  AST_EXPR_PREFIX_OPERATOR_DEREF
  = __AST_DEF (AST_GROUP_EXPR_PREFIX_OPERATOR, 3),

  AST_EXPR_OPERAND_IDENTIFIER = __AST_DEF (AST_GROUP_EXPR_OPERAND, 0),
  AST_EXPR_OPERAND_NUM = __AST_DEF (AST_GROUP_EXPR_OPERAND, 1),
  AST_EXPR_OPERAND_NUMFLOAT = __AST_DEF (AST_GROUP_EXPR_OPERAND, 2),
  AST_EXPR_OPERAND_ARRAY_ELEMENT = __AST_DEF (AST_GROUP_EXPR_OPERAND, 3),
  AST_EXPR_OPERAND_CAST_TO = __AST_DEF (AST_GROUP_EXPR_OPERAND, 4),
  AST_EXPR_OPERAND_CALL = __AST_DEF (AST_GROUP_EXPR_OPERAND, 5),
  AST_EXPR_OPERAND_NUMTYPESPEC = __AST_DEF (AST_GROUP_EXPR_OPERAND, 6),
  AST_EXPR_OPERAND_STRING = __AST_DEF (AST_GROUP_EXPR_OPERAND, 7),
  AST_EXPR_OPERAND_SYMBOL = __AST_DEF (AST_GROUP_EXPR_OPERAND, 8),

  AST_TEMPLATE_TYPE_LIST = __AST_DEF (AST_GROUP_TEMPLATE, 0),
  AST_TEMPLATE_TYPE = __AST_DEF (AST_GROUP_TEMPLATE, 1),
};
#undef __AST_DEF

struct AST
{
  friend class Parser;

  AST () = default;
  explicit AST (ASTType type, const std::string &value = "")
      : value{ value }, type{ type }
  {
  }

  std::string value;
  std::vector<AST> children{};
  ASTType type;

  std::string to_string () const;

  bool is_empty () const;

private:
  size_t _depth{};

  void set_depth (size_t depth);
  AST *append (AST child);
};

}
